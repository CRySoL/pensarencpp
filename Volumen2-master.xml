<?xml  version="1.0" encoding="iso-8859-1"?>

<!--  Documento maestro, NO MODIFICAR -->

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                 "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">

<book 
  xmlns:xi="http://www.w3.org/2001/XInclude"
  lang="es"
  id="pecpp">
  
  <bookinfo>
    <title>Pensar en C++ <parameter>(Volumen 2)</parameter></title>

    <subtitle>
      Traducción (INACABADA) del libro <emphasis>Thinking in C++,
	Volumen 2</emphasis>
    </subtitle>

    <authorgroup>
      <author><firstname>Bruce</firstname><surname>Eckel</surname>
      <affiliation><orgname>Mindview, Inc.</orgname></affiliation>
      </author>
    </authorgroup>

    <copyright>
      <year>2004</year>
      <holder>Bruce Eckel</holder>
    </copyright>
    
    <legalnotice>
    </legalnotice>

  </bookinfo>

  <toc />



  <part>
    <!-- Building Stable Systems -->
    <title>Construcción de Sistemas estables</title>

    <partintro>

      <!-- Software engineers spend about as much time validating code
      as they do creating it. Quality is or should be the goal of every
      programmer, and one can go a long way towards that goal by
      eliminating problems before they happen. In addition, software
      systems should be robust enough to behave reasonably in the
      presence of unforeseen environmental problems.  -->
      <highlights>
	<para>
	  
	</para>
      </highlights>

      <!-- Exceptions were introduced into C++ to support sophisticated
      error handling without cluttering code with an inordinate amount
      of error-handling logic. Chapter 1 shows how proper use of
      exceptions can make for well-behaved software, and also introduces
      the design principles that underlie exception-safe code. In
      Chapter 2 we cover unit testing and debugging techniques intended
      to maximize code quality long before it's released. The use of
      assertions to express and enforce program invariants is a sure
      sign of an experienced software engineer. We also introduce a
      simple framework to support unit testing.  -->
      <para>
	
      </para>
    </partintro>

    <xi:include href="V2-C01.xml"/>
    <!--
    <xi:include href="V2-C02.xml"/>
    -->
  </part>

  <part>
    <!-- The Standard C++ Library -->
    <title>La librería Estándar de C++</title>

    <partintro>
      <highlights>
	<!-- Standard C++ not only incorporates all the Standard C
	libraries (with small additions and changes to support type
	safety), it also adds libraries of its own. These libraries are
	far more powerful than those in Standard C; the leverage you get
	from them is analogous to the leverage you get from changing
	from C to C++. -->
	<para>

	</para>
      </highlights>

      <!-- 
      This section of the book gives you an in-depth introduction to key
      portions of the Standard C++ library.
      -->
      <para>

      </para>

      <!-- The most complete and also the most obscure reference to the
      full libraries is the Standard itself. Bjarne Stroustrup??s The
      C++ Programming Language, Third Edition (Addison Wesley, 2000)
      remains a reliable reference for both the language and the
      library. The most celebrated library-only reference is The C++
      Standard Library: A Tutorial and Reference, by Nicolai Josuttis
      (Addison Wesley, 1999). The goal of the chapters in this part of
      the book is to provide you with an encyclopedia of descriptions
      and examples so that you??ll have a good starting point for
      solving any problem that requires the use of the Standard
      libraries. However, some techniques and topics are rarely used and
      are not covered here. If you can??t find it in these chapters,
      reach for the other two books; this book is not intended to
      replace those books but rather to complement them. In particular,
      we hope that after going through the material in the following
      chapters you??ll have a much easier time understanding those
      books.
      -->
      <para>
	
      </para>

      <!-- You will notice that these chapters do not contain exhaustive
      documentation describing every function and class in the Standard
      C++ library. We??ve left the full descriptions to others; in
      particular to P.J. Plauger??s Dinkumware C/C++ Library Reference
      at http://www.dinkumware.com. This is an excellent online source
      of standard library documentation in HTML format that you can keep
      resident on your computer and view with a Web browser whenever you
      need to look something up. You can view this online or purchase it
      for local viewing. It contains complete reference pages for the
      both the C and C++ libraries (so it??s good to use for all your
      Standard C/C++ programming questions). Electronic documentation is
      effective not only because you can always have it with you, but
      also because you can do an electronic search.  -->
      <para>
	
      </para>

      <!-- When you??re actively programming, these resources should
      satisfy your reference needs (and you can use them to look up
      anything in this chapter that isn??t clear to you). Appendix A
      lists additional references.  -->
      <para>
	
      </para>
      
      <!-- The first chapter in this section introduces the Standard C++
      string class, which is a powerful tool that simplifies most of the
      text-processing chores you might have. Chances are, anything you??
      ve done to character strings with lines of code in C can be done
      with a member function call in the string class.  -->
      <para>
	
      </para>
      
      <!-- Chapter 4 covers the iostreams library, which contains
      classes for processing input and output with files, string
      targets, and the system console.  -->
      <para>

      </para>
      
      <!-- Although Chapter 5, ??Templates in Depth,?? is not explicitly
      a library chapter, it is necessary preparation for the two
      chapters that follow. In Chapter 6 we examine the generic
      algorithms offered by the Standard C++ library. Because they are
      implemented with templates, these algorithms can be applied to any
      sequence of objects. Chapter 7 covers the standard containers and
      their associated iterators. We cover algorithms first because they
      can be fully explored by using only arrays and the vector
      container (which we have been using since early in Volume 1). It
      is also natural to use the standard algorithms in connection with
      containers, so it??s good to be familiar with the algorithms
      before studying the containers.  -->
      <para>

      </para>
    </partintro>

    <!--
    <xi:include href="V2-C03.xml"/>
    <xi:include href="V2-C04.xml"/>
    <xi:include href="V2-C05.xml"/>
    <xi:include href="V2-C06.xml"/>
    <xi:include href="V2-C07.xml"/>
    -->
  </part>

  <part>
    <!-- Special Topics -->
    <title>Temas especiales</title>

    <partintro>
      <!-- The mark of a professional appears in his or her attention to
      the finer points of the craft. In this section of the book we
      discuss advanced features of C++ along with development techniques
      used by polished C++ professionals.  -->
      <highlights>
	<para>
	
	</para>
      </highlights>

      <!-- Sometimes you may need to depart from the conventional wisdom
      of sound object-oriented design by inspecting the runtime type of an
      object. Most of the time you should let virtual functions do that
      job for you, but when writing special-purpose software tools, such
      as debuggers, database viewers, or class browsers, you??ll need to
      determine type information at runtime. This is where the runtime
      type identification (RTTI) mechanism becomes useful. RTTI is the
      topic of Chapter 8. -->
      <para>
	
      </para>

      <!-- Multiple inheritance has taken abuse over the years, and some
      languages don??t even support it. Nonetheless, when used properly,
      it can be a powerful tool for crafting elegant, efficient code. A
      number of standard practices involving multiple inheritance have
      evolved over the years, which we present in Chapter 9. -->
      <para>
	
      </para>

      <!-- Perhaps the most notable innovation in software development
      since object-oriented techniques is the use of design patterns. A
      design pattern describes solutions for many of the common problems
      involved in designing software, and can be applied in many
      situations and implemented in any language. In chapter 10 we
      describe a selected number of design patterns and implement them in
      C++.  -->
      <para>
	
      </para>

      <!-- Chapter 11 explains the benefits and challenges of
      multithreaded programming. The current version of Standard C++ does
      not specify support for threads, even though most operating systems
      provide them. We use a portable, freely available threading library
      to illustrate how C++ programmers can take advantage of threads to
      build more usable and responsive applications. -->
      <para>
	
      </para>
    </partintro>

    <!--
    <xi:include href="V2-C08.xml"/>
    <xi:include href="V2-C09.xml"/>
    <xi:include href="V2-C10.xml"/>
    <xi:include href="V2-C11.xml"/>
    -->
  </part>


  <!--
  <xi:include href="V2-ApenA.xml"/>
  <xi:include href="V2-ApenB.xml"/>
  -->


</book>
